#!/bin/bash

CONFIG_DIR=/etc/config.d/network
CONFIG_DIR=/etc/systemd/network

msgbox() {
    if [ -z "$3" ]
    then
        H=10
    else
        H=$3
    fi
    $DIALOG --title "$1" --msgbox "$2" $H 50
}

inputbox() {
    $DIALOG --nocancel --inputbox "$1" 0 0 "$2"
}

confirm() {
    $DIALOG $2 --yesno "$1" 8 50
}

# Abuse string lengths to convert a netmask to a CIDR number
#
# Input: A netmask in decimal, like "255.255.192.0"
# Output: The number of 1 bits at the beginning of the mask
mask2cdr() {
    local mask=$1
    # These spaces are significant
    local mask_lookup="0   128 192 224 240 248 252 254 "

    # The number of characters in the string "255." is 4, and the number of
    # bits in the octet 255 is 8.  So let's just take the 255's off the
    # beginning of the netmask and calculate the number of bits in the 255s
    # that way
    local mask_size="${#mask}"
    local mask_trimmed="${mask##*255.}"
	local mask_trimmed_size=${#mask_trimmed}
    local mask_major_size=$(( (mask_size - mask_trimmed_size) * 2 ))

    # The "last significant octet" is the last octet that isn't either a 255 or
    # a 0. Or it might be a 0, if the mask consists of only 255s and 0s.
    local mask_last_significant_octet=${mask_trimmed%%.*}

    # Trim everything from the lookup after the LSO
    local mask_lookup_less_lso=${mask_lookup%%${mask_last_significant_octet}*}
    local mask_place_in_lookup=${#mask_lookup_less_lso}
    local mask_minor_size=$(( mask_place_in_lookup / 4))

    echo $(( mask_major_size + mask_minor_size ))
}

# Convert a CIDR number to a netmask
#
# Input: Number of bits in the netmask
# Output: The actual netmask
#
# Rather more straightforward than going the other way round
cidr2mask() {
    local cidr=$1
    local mask=""
    local mask_lookup=(0 128 192 224 240 248 252 254)
    local octets=4

    while ((cidr >= 8))
    do
        mask="255.$mask"
        ((cidr -= 8))
        ((octets --))
    done

    if ((octets > 0))
    then
        mask="$mask${mask_lookup[$cidr]}"
        ((octets -= 1))
    fi

    while ((octets --> 0))
    do
        mask="${mask}.0"
    done

    echo "$mask"
}

# Get list of all network interfaces
get_dev_list() {
    ip link show | awk -F": " '/^[0-9]+/{ if($2 != "lo") print $2; }' | sort
}

# Get list of network interfaces with configuration files
get_configured_dev_list() {
    local interfaces=()
    local dev

    for dev in $(get_dev_list)
    do
        if [ -f $CONFIG_DIR/${dev}.network ]
        then
            interfaces+=($dev)
        fi
    done

    if ((${#interfaces} > 0))
    then
        echo "${interfaces[@]}"
        return 0
    else
        return 1
    fi
}

# Get list of network interfaces without configuration files
get_unconfigured_dev_list() {
    local interfaces=()
    local dev

    for dev in $(get_dev_list)
    do
        if [ ! -f $CONFIG_DIR/${dev}.network ]
        then
            interfaces+=($dev)
        fi
    done

    if ((${#interfaces} > 0))
    then
        echo "${interfaces[@]}"
        return 0
    else
        return 1
    fi
}

get_dev_status() {
    local dev=$1

	if ip -j -p link show $dev | grep -q '^ *"flags":.*"UP"'
	then
        echo '[ UP ]'
	else
        echo '[DOWN]'
    fi
}

hostname_config_menu() {
    [ -f /etc/hostname ] && HOSTNAME=$(cat /etc/hostname)

    HOSTNAME=$(inputbox "Enter this system's host name" "$HOSTNAME")
    # If we're in the installer, just write the hostname file
    if [[ -n "$LUNAR_INSTALL" && -n "$HOSTNAME" ]]
    then
        echo "$HOSTNAME" > /etc/hostname
    else
        hostnamectl set-hostname "$HOSTNAME"
    fi
}

# Configure network device
netdev_config() {
    local device
    local config_type

    if [ -n "$1" ]
    then
        device=$1
    fi

    if [ -n "$2" ]
    then
        config_type=$2
    fi

    if [ $config_type == "dhcp" ]
    then
        {
            echo "[Match]"
            echo "Name=$device"
            echo
            echo "[Network]"
            echo "DHCP=yes"
        } > $CONFIG_DIR/${device}.network
        return
    fi

    if [ $config_type == "static" ]
    then
        local ipaddr=$3
        local gateway=$4
        local dns1=$5
        local dns2=$6

        {
            echo '[Match]'
            echo "Name=$device"
            echo
            echo '[Network]'
            echo "Address=$ipaddr"
            echo "Gateway=$gateway"
            if [ -n "$dns1" ]
            then
                echo "DNS=$dns1"
                if [ -n "$dns2" ]
                then
                    echo "DNS=$dns2"
                fi
            fi
        } > $CONFIG_DIR/${device}.network
    fi
}

netdev_add_menu() {
    local devices=()
    local devices_menu=()
    local dev

    if devices=($(get_unconfigured_dev_list))
    then
        : configure network devices
    else
        msgbox "Network devices" "No network devices found or all network devices have already been configured."
        return
    fi

    local i=1
    for dev in ${devices[@]}
    do
        devices_menu+=($i $dev)
        ((i++))
    done

    local PROMPT
    PROMPT="Select an interface to configure"
    result=$($DIALOG --title "Setup network interface" \
                     --ok-label "Select" \
                     --cancel-label "Back" \
                     --menu \
                     $PROMPT \
                     0 0 0 \
                     "${devices_menu[@]}") || return
    dev=${devices[$[result-1]]}

    netdev_config_menu $dev
}

netdev_config_menu() {
    local device=$1

    local choice

    local config_file="$CONFIG_DIR/${device}.network"
    local DHCP_enabled=true
    local IP_Address=0.0.0.0
    local Netmask=255.255.255.255
    local Gateway=0.0.0.0
    local CIDR
    local masklen=32

    # This function is in two parts. The first part is gathering the
    # existing configuration, if there is any.

    if [ -f $config_file ]
    then
        if grep -A 2 '[Network]' $config_file | grep -q DHCP
        then
            DHCP_enabled=true
        else
            DHCP_enabled=false
            CIDR=$(grep -F -A 10 '[Network]' $config_file |
                      grep '^ *Address=' |
                      cut -f2 -d=)
            if [ -n "$CIDR" ]
            then
                masklen=${CIDR#*/}
                IP_Address=${CIDR%/*}
                Netmask=$(cidr2mask $masklen)
            fi

            Gateway=$(grep -F -A 10 '[Network]"' $config_file |
                      grep '^ *Gateway=' |
                      cut -f2 -d=)

            DNS1=$(grep -F -A 10 '[Network]"' $config_file |
                    grep '^ *DNS=' |
                    head -1 |
                    cut -f1 -d=)
            DNS2=$(grep -F -A 10 '[Network]"' $config_file |
                    grep '^ *DNS=' |
                    tail +2 |
                    head -1 |
                    cut -f1 -d=)

            if [ "$DNS2" == "$DNS1" ]
            then
                DNS2=""
            fi

        fi
    fi

    # The second part is letting the user change the configuration as
    # they see fit.

    while true
    do
        choice=$($DIALOG --title "Network configuration: $device" \
                         --ok-label "Select" \
                         --cancel-label "Back" \
                         --menu "" 0 0 0 \
                         D "DHCP enabled?    [$($DHCP_enabled && echo Y || echo N)]" \
                         $(
                            if ! $DHCP_enabled
                            then
                                echo "I"
                                echo "IP Address     [$IP_Address]"
                                echo "N"
                                echo "Netmask        [$Netmask]"
                                echo "G"
                                echo "Gateway        [$Gateway]"
                                echo "S"
                                echo "Nameserver 1   [$DNS1]"
                                echo "T"
                                echo "Nameserver 2   [$DNS2]"
                            fi
                         )
                ) || return
        case "$choice" in
            D)
                if $DHCP_enabled
                then
                    DHCP_enabled=false
                else
                    DHCP_enabled=true
                fi
            ;;
            I) IP_Address=$(inputbox "Enter IP address" "$IP_Address") ;;
            N) Netmask=$(inputbox "Enter net mask" "$Netmask")         ;;
            G) Gateway=$(inputbox "Enter gateway" "$Gateway")          ;;
            S) DNS1=$(inputbox "Enter DNS server #1" "$DNS1")          ;;
            T) DNS2=$(inputbox "Enter DNS server #2" "$DNS2")          ;;
        esac

        if $DHCP_enabled
        then
            netdev_config $device dhcp
        else
            local masklen=$(mask2cdr $Netmask)
            netdev_config $device static $IP_Address/$masklen $Gateway "$DNS1" "$DNS2"
        fi
    done
}

main() {
    while true
    do
        COUNTER=0
        unset LIST
        unset MANAGE
        for DEVICE in $(get_configured_dev_list)
        do
            if [ -L $CONFIG_DIR/$DEVICE ]
            then
                continue
            fi
            STATUS=$(get_dev_status $DEVICE)
            INTERFACES[$COUNTER]=$DEVICE
            LIST+="$COUNTER\nEdit device $DEVICE    $STATUS\n"
            ((COUNTER++))
        done

        if (( COUNTER > 0 ))
        then
            MANAGE="M\nManage network devices\n"
        fi
		COMMAND=$($DIALOG  --title "Network configuration"  \
						  --ok-label "Select"               \
						  --cancel-label "Exit"             \
						  --menu                            \
						  ""                                \
						  0 0 0                             \
						  $(echo -en $LIST)                 \
						  "A"  "Add a network device"       \
						  "N"  "Setup host name"            \
						  $(echo -en $MANAGE)) || return
		case "$COMMAND" in
            [0-9]*) netdev_config_menu ${INTERFACES[$COMMAND]} ;;
            A)      netdev_add_menu                            ;;
            D)      dns_config_menu                            ;;
            N)      hostname_config_menu                       ;;
            M)      ethernet_manage_menu                       ;;
		esac
    done
}

. /etc/lunar/config
[ -n "$BOOTSTRAP" ] && . $BOOTSTRAP

export IFS="$TAB_ENTER_IFS"
DIALOG="dialog
--backtitle
Lunar Network Management Utility
--stdout"

# Check if we have systemd and that it is running
if module_installed systemd && [ -d /run/systemd ]; then
    SYSTEMDUNITDIR=$(pkg-config systemd --variable=systemdsystemunitdir)
fi

if [  "${BASH_SOURCE[0]}" == "$0" ]
then
    main
fi
